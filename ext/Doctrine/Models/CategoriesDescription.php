<?php

/**
 * CategoriesDescription
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class CategoriesDescription extends Doctrine_Record {

	public function setUp(){
		$this->setUpParent();
		
		$this->setAttribute(Doctrine::ATTR_COLL_KEY, 'language_id');
		
		$this->hasOne('Categories', array(
			'local' => 'categories_id',
			'foreign' => 'categories_id'
		));
	}
	
	public function setUpParent(){
		$Categories = Doctrine::getTable('Categories')->getRecordInstance();
		
		$Categories->hasMany('CategoriesDescription', array(
			'local' => 'categories_id',
			'foreign' => 'categories_id',
			'cascade' => array('delete')
		));
	}
	
	public function setTableDefinition(){
		$this->setTableName('categories_description');
		
		$this->hasColumn('categories_id', 'integer', 4, array(
			'type'          => 'integer',
			'length'        => 4,
			'unsigned'      => 0,
			'primary'       => false,
			'autoincrement' => false
		));
		
		$this->hasColumn('language_id', 'integer', 4, array(
			'type'          => 'integer',
			'length'        => 4,
			'unsigned'      => 0,
			'primary'       => false,
			'default'       => '1',
			'autoincrement' => false
		));
		
		$this->hasColumn('categories_name', 'string', 32, array(
			'type'          => 'string',
			'length'        => 32,
			'fixed'         => false,
			'primary'       => false,
			'default'       => '',
			'notnull'       => true,
			'autoincrement' => false
		));
		
		$this->hasColumn('categories_description', 'string', null, array(
			'type'          => 'string',
			'fixed'         => false,
			'primary'       => false,
			'notnull'       => false,
			'autoincrement' => false
		));
		
		$this->hasColumn('categories_htc_title_tag', 'string', 80, array(
			'type'          => 'string',
			'length'        => 80,
			'fixed'         => false,
			'primary'       => false,
			'notnull'       => false,
			'autoincrement' => false
		));
		
		$this->hasColumn('categories_htc_desc_tag', 'string', null, array(
			'type'          => 'string',
			'fixed'         => false,
			'primary'       => false,
			'notnull'       => false,
			'autoincrement' => false
		));
		
		$this->hasColumn('categories_htc_keywords_tag', 'string', null, array(
			'type'          => 'string',
			'fixed'         => false,
			'primary'       => false,
			'notnull'       => false,
			'autoincrement' => false
		));
		
		$this->hasColumn('categories_htc_description', 'string', null, array(
			'type'          => 'string',
			'fixed'         => false,
			'primary'       => false,
			'notnull'       => false,
			'autoincrement' => false
		));
		
		$this->hasColumn('categories_seo_url', 'string', 100, array(
			'type'          => 'string',
			'length'        => 100,
			'fixed'         => false,
			'primary'       => false,
			'default'       => '',
			'notnull'       => true,
			'autoincrement' => false
		));
	}
	
	public function getCategoryName($categoryId, $languageId){
		$Query = Doctrine_Query::create()
		->select('categories_name')
		->from('CategoriesDescription')
		->where('categories_id = ?', $categoryId)
		->andWhere('language_id = ?', $languageId)
		->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
		return $Query[0]['categories_name'];
	}
	
	public function newLanguageProcess($fromLangId, $toLangId){
		$Qdescription = Doctrine_Query::create()
		->from('CategoriesDescription')
		->where('language_id = ?', (int) $fromLangId)
		->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
		foreach($Qdescription as $Record){
			$toTranslate = array(
				'name'            => $Record['categories_name'],
				'description'     => $Record['categories_description'],
				'htc_title'       => $Record['categories_htc_title_tag'],
				'htc_desc'        => $Record['categories_htc_desc_tag'],
				'htc_keywords'    => $Record['categories_htc_keywords_tag'],
				'htc_description' => $Record['categories_htc_description']
			);
			
			EventManager::notify('CategoriesDescriptionNewLanguageProcessBeforeTranslate', $toTranslate);
			
			$translated = sysLanguage::translateText($toTranslate, (int) $toLangId, (int) $fromLangId);
			
			$newDesc = new CategoriesDescription();
			$newDesc->categories_id = $Record['categories_id'];
			$newDesc->language_id = (int) $toLangId;
			$newDesc->categories_name = $translated['name'];
			$newDesc->categories_description = $translated['description'];
			$newDesc->categories_htc_title_tag = $translated['htc_title'];
			$newDesc->categories_htc_desc_tag = $translated['htc_desc'];
			$newDesc->categories_htc_keywords_tag = $translated['htc_keywords'];
			$newDesc->categories_htc_description = $translated['htc_description'];
			$newDesc->categories_seo_url = $Record['categories_seo_url'];
			
			EventManager::notify('CategoriesDescriptionNewLanguageProcessBeforeSave', $newDesc);
			
			$newDesc->save();
		}
	}
	
	public function cleanLanguageProcess($existsId){
		Doctrine_Query::create()
		->delete('CategoriesDescription')
		->whereNotIn('language_id', $existsId)
		->execute();
	}

	public function deleteLanguageProcess($langId){
		Doctrine_Query::create()
		->delete('CategoriesDescription')
		->where('language_id = ?', (int) $langId)
		->execute();
	}
}