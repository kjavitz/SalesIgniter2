<?php

/**
 * CouponsDescription
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
class CouponsDescription extends Doctrine_Record {

    public function setUp(){
		$this->setUpParent();
        //$this->setAttribute(Doctrine::ATTR_COLL_KEY, 'language_id');
		$this->hasOne('Coupons', array(
			'local' => 'coupon_id',
			'foreign' => 'coupon_id'
		));
	}

	public function setUpParent(){
		$Coupons = Doctrine::getTable('Coupons')->getRecordInstance();
		$Coupons->hasMany('CouponsDescription', array(
			'local' => 'coupon_id',
			'foreign' => 'coupon_id',
			'cascade' => array('delete')
		));
	}

	public function setTableDefinition(){
		$this->setTableName('coupons_description');
		
		$this->hasColumn('coupon_id', 'integer', 4, array(
			'type' => 'integer',
			'length' => 4,
			'unsigned' => 0,
			'primary' => false,
			'default' => '0',
			'notnull' => true,
			'autoincrement' => false,
		));
		$this->hasColumn('language_id', 'integer', 4, array(
			'type' => 'integer',
			'length' => 4,
			'unsigned' => 0,
			'primary' => false,
			'default' => '0',
			'notnull' => true,
			'autoincrement' => false,
		));
		$this->hasColumn('coupon_name', 'string', 32, array(
			'type' => 'string',
			'length' => 32,
			'fixed' => false,
			'primary' => false,
			'default' => '',
			'notnull' => true,
			'autoincrement' => false,
		));
		$this->hasColumn('coupon_description', 'string', 999, array(
			'type' => 'string',
			'fixed' => false,
			'primary' => false,
			'notnull' => false,
			'autoincrement' => false,
		));
	}
	
	public function newLanguageProcess($fromLangId, $toLangId){
		$Qdescription = Doctrine_Query::create()
		->from('CouponsDescription')
		->where('language_id = ?', (int) $fromLangId)
		->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
		foreach($Qdescription as $Record){
			$toTranslate = array(
				'name'        => $Record['coupon_name'],
				'description' => $Record['coupon_description']
			);
			
			EventManager::notify('CouponsDescriptionNewLanguageProcessBeforeTranslate', $toTranslate);

			$translated = sysLanguage::translateText($toTranslate, (int) $toLangId, (int) $fromLangId);
			
			$newDesc = new CouponsDescription();
			$newDesc->coupon_id = $Record['coupon_id'];
			$newDesc->language_id = (int) $toLangId;
			$newDesc->coupon_name = $translated['name'];
			$newDesc->coupon_description = $translated['description'];
			
			EventManager::notify('CouponsDescriptionNewLanguageProcessBeforeSave', $newDesc);
			
			$newDesc->save();
		}
	}
	
	public function cleanLanguageProcess($existsId){
		Doctrine_Query::create()
		->delete('CouponsDescription')
		->whereNotIn('language_id', $existsId)
		->execute();
	}

	public function deleteLanguageProcess($langId){
		Doctrine_Query::create()
		->delete('CouponsDescription')
		->where('language_id = ?', (int) $langId)
		->execute();
	}
}